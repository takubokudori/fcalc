/* Generated By:JavaCC: Do not edit this line. Calcparser.java */
package fcalc;

import java.io.*;
import java.util.*;

class Calcparser implements CalcparserConstants {

    final public Node start() throws ParseException {
        Node root = null, node;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NUM:
            case PLUSOP:
            case MINUSOP:
            case OPEN:
            case VAR:
            case GLOBALV:
            case FUNCV:
                root = xexpr();
                break;
            default:
                jj_la1[0] = jj_gen;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 0:
                jj_consume_token(0);
                break;
            case LF:
                jj_consume_token(LF);
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node xexpr() throws ParseException {
        Node root = null, node = null;
        root = expr();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQUALOP:
                jj_consume_token(EQUALOP);
                node = expr();
                root = Op.connectToLeft(root);
                root.setOp('=');
                root.addRight(node);
                break;
            default:
                jj_la1[2] = jj_gen;
        }
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final public Node expr() throws ParseException {
        Node root, node;
        root = prod();
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUSOP:
                case MINUSOP:
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_1;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUSOP:
                    jj_consume_token(PLUSOP);
                    node = prod();
                    root = Op.connectToLeft(root);
                    root.setOp('+');
                    root.addRight(node);
                    break;
                case MINUSOP:
                    jj_consume_token(MINUSOP);
                    node = prod();
                    root = Op.connectToLeft(root);
                    root.setOp('-');
                    root.addRight(node);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final private Node prod() throws ParseException {
        Node node, root;
        root = pow();
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MULTIOP:
                case DIVIDEOP:
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MULTIOP:
                    jj_consume_token(MULTIOP);
                    node = pow();
                    root = Op.connectToLeft(root);
                    root.setOp('*');
                    root.addRight(node);
                    break;
                case DIVIDEOP:
                    jj_consume_token(DIVIDEOP);
                    node = pow();
                    root = Op.connectToLeft(root);
                    root.setOp('/');
                    root.addRight(node);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final private Node pow() throws ParseException {
        Node root, node;
        root = param();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case POWEROP:
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_3;
            }
            jj_consume_token(POWEROP);
            node = param();
            root = Op.connectToLeft(root);
            root.setOp('^');
            root.addRight(node);
        }
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    final private Node param() throws ParseException {
        Node node;
        boolean minusf = false;
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUSOP:
                case MINUSOP:
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_4;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MINUSOP:
                    jj_consume_token(MINUSOP);
                    minusf = !minusf;
                    break;
                case PLUSOP:
                    jj_consume_token(PLUSOP);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FUNCV:
                node = func();
                if (minusf) node.setMinus(minusf);
            {
                if (true) return node;
            }
            break;
            case VAR:
                node = var();
                if (minusf) node.setMinus(minusf);
            {
                if (true) return node;
            }
            break;
            case NUM:
            case GLOBALV:
                node = num();
                if (minusf) node.setMinus(minusf);
            {
                if (true) return node;
            }
            break;
            case OPEN:
                jj_consume_token(OPEN);
                node = expr();
                jj_consume_token(CLOSE);
                if (minusf) node.setMinus(minusf);
            {
                if (true) return node;
            }
            break;
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final private Node num() throws ParseException {
        Node root = null;
        Token token;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NUM:
                token = jj_consume_token(NUM);
                double temp = Double.parseDouble(token.image);
            {
                if (true) return new Poly(temp);
            }
            break;
            case GLOBALV:
                root = gvar();
            {
                if (true) return root;
            }
            break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final private Node var() throws ParseException {
        Node coe;
        char vname;
        token = jj_consume_token(VAR);
        {
            if (true) return new Poly(token.image.charAt(0));
        }
        throw new Error("Missing return statement in function");
    }

    final private Node gvar() throws ParseException {
        Token token;
        char gvar_name;
        token = jj_consume_token(GLOBALV);
        {
            if (true) return new Gvar(token.image.charAt(1));
        }
        throw new Error("Missing return statement in function");
    }

    final private Node func() throws ParseException {
        Token token;
        char func_name;
        Node node;
        LinkedList<Node> args_list = new LinkedList<Node>();
        token = jj_consume_token(FUNCV);
        func_name = token.image.charAt(1);
        jj_consume_token(OPEN);
        node = expr();
        args_list.add(node);
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    break label_5;
            }
            jj_consume_token(COMMA);
            node = expr();
            args_list.add(node);
        }
        jj_consume_token(CLOSE);
        {
            if (true) return new Func(func_name, args_list);
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Generated Token Manager.
     */
    public CalcparserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[13];
    static private int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x1c8e, 0x4001, 0x200, 0xc, 0xc, 0x50, 0x50, 0x20, 0xc, 0xc, 0x1c82, 0x802, 0x2000,};
    }

    /**
     * Constructor with InputStream.
     */
    public Calcparser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Calcparser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CalcparserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public Calcparser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CalcparserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Calcparser(CalcparserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CalcparserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[18];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 13; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 18; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

}
